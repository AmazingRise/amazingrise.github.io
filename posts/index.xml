<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on 左手的世界</title><link>https://risehere.net/posts/</link><description>Recent content in Posts on 左手的世界</description><generator>Hugo -- gohugo.io</generator><language>zh-TW</language><copyright>Rise. 本站遵循 CC-BY-NC 4.0 协议</copyright><lastBuildDate>Thu, 14 Jan 2021 20:04:40 +0800</lastBuildDate><atom:link href="https://risehere.net/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>如何把 C 语言移植到 RISC-V 裸机上</title><link>https://risehere.net/posts/running-c-program-on-bare-machine/</link><pubDate>Thu, 14 Jan 2021 20:04:40 +0800</pubDate><guid>https://risehere.net/posts/running-c-program-on-bare-machine/</guid><description>前言 之前用 Verilog 模拟实现了一个简易的 RISC-V 处理器（RV32I 指令集）。为了跑测试程序，我们的这个处理器自然也要带上存储器，所以实际上它是一台简单的计算机。为了简化设计，这台计算机基于哈佛架构。简单来说，就是数据和指令分开存储，机器读取。想要运行程序，就要把汇编代码编译出来，烧写到我们的 ROM 上。
为了方便调试，我对 CPU 进行了一些简单的约定：
外界可以通过8个二进制开关对计算机输入一个值。这个值可以在内存地址 0x40000000 处读取到。 8个 LED 灯与内存地址 0x80000000 上的值相绑定。也就是这里的值，将会以二进制的形式显示在 8 个 LED 灯上。 处理器加电时会产生 RST 信号。寄存器收到 RST 信号时，所有的寄存器将会被置零。这个约定是为了方便初始化寄存器。 我们的目标是在我们的 RISC-V 计算机上成功运行一个 Fibonacci 数运算程序。流程是：
拨动8个开关，作为输入。 给板子加电。 Fibonacci 运算程序从 0x40000000 处读取8位开关的输入。 Fibonacci 运算程序进行计算。 Fibonacci 运算程序将结果写到 0x80000000 这个地址上。 8位 LED 灯以二进制的形式显示0x80000000 处的内容。 用汇编实现这个程序很轻松。
.globl __start .globl end .text __start: lui x1,0x0; lw x10,0x40000000(x0); addi x2,x0,3; addi x5,x0,1; blt x10,x2,end; addi x1,x1,12; # init addi x6,x0,1; sw x6,-8(x1); sw x6,-4(x1); main: lw x3,-8(x1); lw x4,-4(x1); add x5,x3,x4; sw x5,0(x1); beq x2,x10,end; addi x1,x1,4; addi x2,x2,1; beq x0,x0,main; end: sw x5,0x80000000(x0); 那么，我们是否可以将 C 语言程序移植到这个平台上呢？</description></item><item><title>为什么有些汉字在日语中会读成两拍</title><link>https://risehere.net/posts/checked-tone-in-japanese/</link><pubDate>Sat, 07 Nov 2020 10:45:28 +0800</pubDate><guid>https://risehere.net/posts/checked-tone-in-japanese/</guid><description>前言 写这篇文章的动机，还要从8月说起。那天我在网上冲浪时无意间发现了“沉默”一词的最初写法应为“沈默”。我说，这一点可以在日语、朝鲜语、越南语中“沈默”一词的汉字写法上得到印证，并附上了一张维基字典的截图。
此时一位师兄突然指出，日语汉字“黙”（もく，mo ku）读成两拍的原因是，末尾的“く”是在模拟古汉语中的“入声”。经过一番资料查找，我对日语中的“入声”终于有了点小小的认识，今分享于此。
这篇文章不是一个严肃的研究文章，只是我对东亚文化圈中一些有趣现象的记录，大家看个乐呵就行。本文将会简单介绍日语的一些特点，以及中古汉语留下的蛛丝马迹&amp;ndash;“入声”。
声明：本人并非专业的语言学研究人员，文章中如有错误，欢迎指正！
欲读懂本文：
你需要了解日本的五十音图。不过所有的假名我都附上了罗马音，所以大概了解五十音图就可以。 你需要对入声有一点了解，可参见粤语的声调与入声 - 入声一节。 另外，我用粤语拼音模拟了一下中古汉语的拼音。对于没有学过粤语的读者，可以把粤拼当作英文来读。 其它知识我会在文中予以补充，请大家放心食用。
正文 汉字传入日本 日本刚开始是没有文字的，但出于文化传播的需要，日本需要借来汉字来表达他们的语言。于是，在几百年的中日交流中，既借来了汉字用于表音（表达读音），又借来了汉字用于表意（表达意思）。这里引用《写给大家的日语史》中的一个例子：汉字“山”。
将山的读音借来了，读作サン(sa n)。 又让山表意，对应日语中固有（即当地人自己发明）的やま(ya ma)。即，山在这种情况下读音为やま。 所以，一个汉字通常有两类读法：前者被称为“音读”，后者被称为“训读”。本文的主角“入声”主要存在于音读中。
援引自维基百科，音读按照传入日本的时间，分为以下几种：
古音：早于吴音传入日本的汉字音。源于中国上古音。 吴音：早在公元5世纪、6世纪辗转而入的字音。 汉音：于公元7世纪左右，日本始派出遣唐使自大唐所习得之字音。对当代日语影响最为深远。 唐音：指宋元以后才传入日本的汉字读音，以南方口音为基准。 而这几次传入，中国基本都处在中古汉语时期。这个时期的汉语是带有入声的。而大多数入声字，在日语中都会读成两拍。下面我将说明这一现象的来龙去脉。
为什么入声读两拍 日语的音节多数为开音节，意思就是读音是“辅音+元音”的结构（拨音ん和促音っ则是例外）。
举个直观的例子，球员贝克汉姆，可以翻译成以下读音：
汉语普通话 粤语 日语 写作 贝克汉姆 碧咸 ベッカム 读作 bei ke han mu bik ham Be kka mu 可以看到，汉语普通话和日语同为开音节占优势语言，在翻译形如 ham 的音时，总要把 ha 与 m 拆开，后加一个多余的元音，构成开音节。同理，日本将中古汉语带入日语时，在入声字的结尾再加入一个元音，构成一个开音节。</description></item><item><title>古墓丽影考古记</title><link>https://risehere.net/posts/tomb-raider/</link><pubDate>Tue, 11 Aug 2020 08:42:26 +0800</pubDate><guid>https://risehere.net/posts/tomb-raider/</guid><description>前言 近几日网络不太好，玩 CSGO 都能卡成 Counter Strike: Microsoft PowerPoint。于是我打算下载个单机游戏，正好前几天在 Steam 里白嫖到了 Tomb Raider。（等等党の勝利）
这个游戏在 Steam 里就叫 Tomb Raider ，我差点以为是 1996 年的那个第一代作品。后来看了一下发行时间，推测出应该是 9 代作品。那么 7 年前的游戏会不会很老套呢？
正文 中规中矩 古墓丽影讲的故事中规中矩。换句话说，是一个很老套的西方个人英雄主义故事。游戏难度也不是特别大。
劳拉带有主角光环，能在危楼临立之中反复横跳，如履平地，并且在经历了狂风暴雨、山崩地陷、千军万马、兵临城下、熊熊大火、高山蹦极等极限运动之后依旧安然无恙。 主角没有血条，只要没有连续伤害就能活（作死跳崖不算）。所以被敌人打得快残的时候，只要苟一会就能原地满血。 劳拉身负重伤还能活蹦乱跳，伤口浸在污水里仍然大丈夫，丝毫不惧破伤风。 而有些地方的敌人会选择性失明、失聪。甚至劳拉在武士们头上过独木桥，在墙边上爬，也没有被发现。不过也似乎解释得通：这些日本武士已经活了上千年了，眼神不好使也正常（雾）。 就算死了，也能从存档点复活。并且随时随地都能存档。 难道这个游戏真的是一款老掉牙的过气游戏吗？
制作精良 当然不是。它的制作之精良甚至令人叹为观止。现在也是。
林深见鹿 飞泉碧峰 在游戏里的第二天早上，天晴了，劳拉在营地醒来，破败的荒岛深林居然也开始浮现出勃勃生机。发了一把弓，需要用它射动物。虽然说这事有点残忍，但主角作为幸存者，要恰饭的嘛。
这个游戏的射击手感非常棒，在完成第一个任务的时候居然会有一种“在玩休闲打猎游戏”的错觉。小溪潺潺，鹿鸣呦呦，完全不是一个冒险游戏该有的样子。 （啊说到这个，通关之后我还去林子里继续打了一会猎来着，真的上瘾。）
运镜巧妙 画幅宏伟 除此之外，游戏对于构图和运镜也十分考究。有一幕是，劳拉需要爬无线电塔，向紧急电台发送求救信号。这时，镜头渐渐拉远，天空中微微飘着雪，苍茫的大地在屏幕里无限延伸，与渺小的劳拉形成了鲜明的对比。突然就有一种“寄蜉蝣于天地，渺沧海之一粟”的空虚感。
是的，在大自然面前，人就是蝼蚁一般的存在。随后过来救援的直升机就被雷电击中了。
下图打败最终 BOSS 的视角。圣洁的光，照在了大地上（雾）
还有另外几处攀爬地点，在经过这些地点时，镜头也会自动拉到一个合适的角度，不会使人产生眩晕感。并且这种手法和电影运镜很相似，让人有一种在看大片的感觉，体验极佳。
宝物瑰丽 建筑精美 失落的日本邪马台（虚构）古文明究竟是什么样子？我们不曾得知。但游戏制作方从各个角度呈现出了古老帝国曾经的辉煌。
邪马台的宫殿历经风霜雨雪，仍旧矗立在这个荒岛上，宏伟而壮观。
这里也有辉煌的大型古代墓穴，在地下甚至有高耸的楼阁，和一幅幅精美而巨大的壁画。
在这里，不仅有日本的古物，他们还发现了来自中国和泰国等地的文物。说明这个古老的帝国文明和东亚各国，乃至东南亚都有过密切交流。
仔细观察就会发现，岛上也有二战时期的一些遗留：地上的很多遗体还披着日本二战时候的军装，很多指示牌也是二战时期的，还有一个分支墓位于二战废弃实验室。从这些细节我们可以窥探出，这个岛曾经是一个重要的军事基地。但遗憾的是，游戏未能在此展开。
（有一说一，那个二战废弃实验室的分支墓居然是古风，给人一种风马牛不相及的感觉。）
开放世界 永不止步 这个游戏是开放世界游戏。在完成主线结局后，你可以继续在岛上完成剩余部分的探索。不过这个在现在已经不是什么亮点了，在此游戏发售之前就有很多开放世界游戏了。
刚开始我是打算先粗略通关一次，分支留着下次再仔细打。没想到在游戏的最后，劳拉说：我可不打算回家，我还要继续探索。原来在结局后还能继续探索！令我有点失望的是，分支墓规模很小，开到最后也只有一个宝箱。
另外，这个游戏还支持联机，而且有多种模式，看来制作组野心不小。它作为 FPS 手感还真说得过去，不过它一直不温不火，我认为是有些遗憾的。
主角好看 真的好看 主角是真的好看，这我就不必多说了，你们自己下载一个就知道了，2333。（不会编了）
总结 对游戏的结语 任何事物不可能做到完美，它也有一些缺点。文章刚开始的时候说的难度低，虽然有很多人吐槽，但也算是可以理解的：因为如果游戏过难，就不容易突出它的故事性了。除此之外，它所讲的故事有些过于牵强，主角居然为了救一个人而使那么多人牺牲。</description></item><item><title>粤语的声调及入声</title><link>https://risehere.net/2019/10/27/checked-tone-in-cantonese/</link><pubDate>Sat, 04 Jul 2020 00:00:00 +0000</pubDate><guid>https://risehere.net/2019/10/27/checked-tone-in-cantonese/</guid><description>本文原发于2019.10.27。今日梳理了一下文章思路，删除了一些冗余的内容，并调整了一下文章的结构。
前言 汉语读起来十分动听， 而它正是以其抑扬顿挫之语调而著名。而粤语(广州话)中很好保留了中古汉语中的一些特征，例如声调和韵尾。
本文将要介绍粤语的声调和韵尾。由于本人并非专业研究人员。若有错误欢迎指正！
注：下文所指粤语，均为广州话为代表的粤语。
声调 五度标记法 为了更好地给大家介绍粤语声调，这里先引入一种记录现代汉语声调的最广泛的方法：五度标记法。五度标记法在汉语方言相关研究中大量使用。 (由赵元任先生发明，他被称为汉语言学之父)
五度标记法它标记了一个音韵的起始，中间过程(有时省略)，和结尾的音调高低。 下面我将以现代汉语普通话为例， 跟大家介绍一下五度标记法。
现代汉语拼音方案中用一声，二声，三声，四声表示普通话中的四个音调。以这四个声调为例，我放出一张用五度标记法标记的四个声调的图，大家先体会一下。
曲线很直观，声调越高，曲线中对应的那一点越高。而某一位置所对应的数值越高，则代表该位置的数字表示的声调越高。我们可以从图中读出，普通话中：
一声的调值为55 二声的调值为35 三声的调值为214 四声的调值为51 大家可以尝试用普通话大声朗读这四个字来体会一下。
番（fan 一声）[55]，茄（qie 二声）[35]，炒（chao 三声）[214]，蛋（dan 四声）[51]。
(感谢维基百科提供的好例子)
我们可以看出，五度标记法的数字是有表面含义的，它们每个都代表调的相对高低。而现代汉语拼音方案的数字是无表面意义的，只是四种调型的序号而已。
粤语的九声六调 目前最广泛的粤语拼音方案是粤拼，也就是香港语言学学会的粤语拼音方案。本文采用粤拼来标注粤语的声调。
援引自「中文字元资料页」的内容：
粤音则由四声，发展成九种声调，分别为：「阴平」、「阴上」、「阴去」，「阳平」、「阳上」、「阳去」，「阴入」、「中入」和「阳入」。其中「阴平、阴上、阴去、阴入、中入」是阴声系，「阳平、阳上、阳去、阳入」是阳声系。阴声系的调值较高，阳声系的调值较低。
这些声调分别对应粤拼方案的1-9。不过这段话可能过于抽象。为了让大家更好理解，我们来用刚刚学的五度标记法来标识一下：
音调 阴平 阴上 阴去 阳平 阳上 阳去 阴入 中入 阳入 粤拼 1 2 3 4 5 6 7 8 9 五度 55/53 35 33 11/21 13 22 5(5) 3(3) 2(2) 我们可以看到，粤拼的数字，与现代汉语拼音方案都仅仅代表某一个调型，并不代表本身声调的高低，数值本身是无意义的。</description></item><item><title>2020年，在 Linux 下动手编译 OpenJDK 8</title><link>https://risehere.net/posts/building-openjdk/</link><pubDate>Tue, 05 May 2020 12:52:49 +0800</pubDate><guid>https://risehere.net/posts/building-openjdk/</guid><description>前言 这两天开始读深入理解 Java 虚拟机了。在这本书的第一章就提到了动手编译 OpenJDK。 突然想到 2018 年 11 月被 OpenCV 的交叉编译支配的恐惧。
网上的各种攻略琳琅满目，五花八门。
终于，在蹚了前人的那些坑之后，我成功编译了 OpenJDK 8。其实编译一个 JDK 也没那么难。
&amp;ndash; 即使是 2020 年，在更新策略激进的 Arch 系 Linux 下，我没有降级任何软件也照样编译成功。
注：本篇文章以 Manjaro Linux 为例进行讲解。其它的 Linux 基本一致，只是软件包名不同。
准备 环境 名称 版本 OS Manjaro 20.0 Lysia Kernel x86_64 Linux 4.19.118-1-MANJARO make GNU Make 4.3 x86_64-pc-linux-gnu GCC gcc (Arch Linux 9.3.0-1) 9.3.0 注：我并没有切换到低版本的 gcc。</description></item><item><title>博客建立一周年纪念</title><link>https://risehere.net/posts/one-year-anniversary/</link><pubDate>Tue, 31 Mar 2020 23:08:27 +0800</pubDate><guid>https://risehere.net/posts/one-year-anniversary/</guid><description>今天，不是一周年整。无论是第一次发博文，还是网站开始运行，都不是完整的一周年。 但我已经迫不及待地想发博文，纪念我人生中第二个正儿八经的网站。
同时，今天也是博客深色模式上线的第一天，目前处于测试阶段，欢迎大家玩玩那个奇怪的按钮！
还有，评论时留邮箱，会在有回复的时候自动发邮件提醒，欢迎大家留言。（来自no-reply At amazingrise.net）
（如何进入深色模式？手机版用户请看右上角的奇怪按钮，电脑版用户请看右下角的奇怪按钮）
（如果你的浏览器支持深色模式，那么本页就会跟随浏览器设置，自动进入深色模式）
到访人数 截止3月30日，已经有 2416 位不同的人到访过左手的世界，其中有 413 位是回头客。
其中，有 1468 人使用 Chrome，220 人使用 Firefox。
网站的总浏览量达到 1.04 万。
一些想法 感觉有的时候灵感真的就是一瞬间，稍纵即逝。目前积压着的草稿有3篇，计划中但未开头的有2篇，有的估计已经写不出来了。
所以如果大家脑子里有好的想法，一定要好好记下来，并且尽快实现它。
我的变化 我在这一年里，学习了不少新技术，经历了不少事情，结交了不少朋友，思考也更加的多了。
低谷 过去的这一年，我经历了人生中的第 n 次低谷，并且沉迷于游戏中，试图逃避现实。当时的感觉就是信仰崩塌，世界观崩塌。
不过当时有一首歌给我的鼓舞很大，我可以把这首歌的链接贴出来。（禁止外链播放，我也是很无奈）
A Rock &amp;lsquo;n&amp;rsquo; Roll Fantasy - The Kinks
这首歌讲的是：
摇滚乐队面临解散，猫王已逝，时代终结，打算各奔东西。
街区的一位伙伴，情绪低落之时沉浸于录制唱片。当他觉得世界对他关上大门，他就把音量调到最大，于是每日生活逃避现实，生活于摇滚狂想中。
不过我不会像他一样就此罢休。我们也有过铁杆粉丝，见证我们成长，陪我们度过摇滚生涯中的巅峰与低潮。
但我们总是胡思乱想，认为这个世界已经不需要我们了。我们不能生活在摇滚狂想中，我们不能活在现实的边缘。
在我最低落的时候，我反复听着这首歌。虽然对结果早有预料，但是还是感觉自己就像做梦一样。
后来大概是时间抚平了一切。我找到了自己的定位，并且尝试积极面对生活。
新技术与新发现 这一年，我没少折腾新技术。在各种各样的机会，和给自己挖的各种坑里，我学会了很多东西。
每次我自己造出来的东西，开始正常工作，都有一种说不出的奇怪的自豪感（奇怪大概是因为：哇这玩意居然能跑起来）。而面对一些牛逼的新技术，我不禁惊叹，原来代码还可以写得这么优美！
对于新发现，我列不出来啦。我还是像以前一样，喜欢研究奇奇怪怪的东西，尤其各种各样语言方面的东西。比如我发了一篇关于粤语入声的博文。（不过囿于本人水平，这些东西也说不上是多么高深，跟真正研究相关内容的各位肯定是小巫见大巫了）
同时，我还有做自媒体的想法。可惜现在时间不是很充裕，大概很难做大。
最后 总结一下，过去的一年，有不满意的地方，也有让自己惊喜的地方。
嗯。大概就是这么多话吧。如果有什么话想跟我说，欢迎评论区留言。
（再说一遍，现在的评论区支持回复通知了，留下邮箱可以收到回复提醒哦）</description></item><item><title>初识 Vue 之 - 用 Vue 组件减少代码量</title><link>https://risehere.net/posts/getting-to-know-vue-components/</link><pubDate>Mon, 16 Mar 2020 10:12:18 +0800</pubDate><guid>https://risehere.net/posts/getting-to-know-vue-components/</guid><description>前言 这又是一篇很基础很基础的文章。（因为我菜鸡呀.估计大佬们都去折腾算法分析什么的，只有我这个菜鸡还在天天搬砖，太难了。
本篇文章主要讲述如何用 Vue Components 减少重复代码量。
需求 博客的友链页是由一个表格构成的：
name url description 张三 https://zhangsan.com 张三的挖坑日记 李四 https://lisi.com 李四的网络日志 不行，这太简陋了。如何编写一个更好的友链页呢？
实现 那么我们就用 Bootstrap 的卡片来实现一个卡片式的友链页吧。
实现1 不用 Vue 下面我们用 Bootstrap 的卡片实现一个友链卡片。
&amp;lt;!--为了使代码在这个例子中更加简洁，我暂且用 style 规定了一下卡片的宽度。--&amp;gt; &amp;lt;div class=&amp;#34;card&amp;#34; style=&amp;#34;width:20rem;&amp;#34;&amp;gt; &amp;lt;div class=&amp;#34;card-body&amp;#34;&amp;gt; &amp;lt;!-- 标题 --&amp;gt; &amp;lt;p class=&amp;#34;h4&amp;#34;&amp;gt;张三&amp;lt;/p&amp;gt; &amp;lt;!-- 描述 --&amp;gt; &amp;lt;p&amp;gt;张三的挖坑日记&amp;lt;/p&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div class=&amp;#34;card-footer&amp;#34;&amp;gt; &amp;lt;!-- 链接 --&amp;gt; &amp;lt;a href=&amp;#34;https://zhangsan.com&amp;#34;&amp;gt;https://zhangsan.com&amp;lt;/a&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; 实现效果如下：
张三
张三的挖坑日记</description></item><item><title>今天你是锦鲤吗</title><link>https://risehere.net/posts/koi-carp-scam/</link><pubDate>Sun, 16 Feb 2020 12:29:40 +0800</pubDate><guid>https://risehere.net/posts/koi-carp-scam/</guid><description>前言 本人多年前毕业于某 985 高校的信息安全专业。另外，本站受 Cloudflare CDN 的防护。
引用一句烂大街名人名言(不过确实有道理)
命运赠予的礼物，早已在暗中标好了价格。
今天你是锦鲤吗? 不是。以后也不会是。
结论 考虑到一些读者可能对长篇大论产生恐惧，在此我先亮出结论:
每一次锦鲤转发都为商家做了免费推广。 中了奖，不但为商家做了免费的宣传，而且个人信息将会无偿奉献给商家。 如果是正规商家，活生生的人将会变成商家的&amp;quot;优质推广机器&amp;quot;，以后没准有&amp;quot;好事&amp;quot;还会找上门。 如果是搞辣鸡营销的，手机号将会在黑市上标好价格被批发，并且反复倒卖。 可见，无论是哪条路，说到底，锦鲤活动还是商家赚钱的手段。
我们还是要擦亮自己的眼睛，吃一堑长一智。 毕竟我也是这么走过来的。
各位息怒啊，不要打我。消消气往下看。
正文 今天早上一醒来，就又被微信朋友圈的某一爆款锦鲤文章刷屏了:寻找某某高校不出门锦鲤，10000元奖品独宠你!。
其实我相信大家的心是好的，在家不出门也是为抗击疫情做贡献，还能顺便抽个奖，万一中了呢?
实际上这是一个精心策划的营销活动，并且天上不会掉馅饼，看似免费的转发也付出了一定代价。
下面我将分解一下它的千层套路。
渣男行为 这种抽奖其实是渣男行为。我们看一下标题，寻找某某高校不出门锦鲤。
这个标题可能会产生以下误导:
该活动是商家跟学校联合推出的活动。 商家只独宠我们高校嘻嘻嘻为母校自豪。 首先，学校肯定是不会接这样的赞助恰烂钱，学校不缺这点钱，尤其是985/211工程院校。并且据老同学(曾经担任过社团社长)透露，学校也是禁止社团拉这样的赞助的。所以，学校不可能跟商家联合推出这样的活动，这只是商家为了增加可信度所加上的谎言。
第二，这种套近乎的手段其实屡见不鲜。要戳破这个谎言也很简单：我们打开其中的某一篇推文。查看一下阅读量。以今天早上我看到的这篇推文为例，阅读量只有9800。然后我们关注一下公众号，按照他们说的办法，我们找到了&amp;quot;抽奖助手&amp;quot;小程序二维码。扫码进入，发现参与抽奖人数是2w。这说明什么?(doge
其实我们也可以直接利用微信的搜一搜功能，以关键词寻找 大学 不出门 锦鲤查找，便会找到 n 多一模一样，只是大学名字换了的推文:
所以，推文推给的，并不是&amp;quot;被独宠的那个ta&amp;quot;。我们只是商家 &amp;ldquo;广撒网&amp;quot;的猎物。
更何况，这些活动往年就有几乎一模一样的东西。第二年出来换个外衣，说个校庆，或者是蹭疫情热度，来个换汤不换药的推文。
分母的秘密 当商家广撒网，撒到了自己的朋友圈里。很多人看到了会调侃一下，说当个分母吧！（请勿对号入座）于是点开了推文，抱着“当个分母反正也不花钱”的心理，虔诚转发。（对于免费背后的危机，将会在下文展开分析。）
这种抽奖行为一般具有以下几种要素：
奖品金额很大。 关注公众号，点点转发就可以参与抽奖。 中奖率很低。 我们来分析一下这几点。
对于第一点，奖品金额很大，对于人们有很大的诱惑力。而第二点，基本是不花费什么明显的成本，只需要轻松关注+转发，便可以坐等巨型锦鲤砸到头上。怎么算都是一笔很划算的账。
面对推文，一部分人看到这里的时候，心理可能还留存着一些顾虑：万一没有中奖，转发岂不是很丢人？而第三点成功打消了他们最后的顾虑：本来这就是中奖率很低的抽奖，我转发仅仅是出于“玩一下”的目的，所以没中也没关系啦。
这便是分母的秘密，中奖率很低，但奖品金额很大，参与成本很低。即使没中奖，也不会丢面子，分母们也乐在其中。
免费的代价 有人可能会说：
他渣不渣男，我当不当分母，我都不管。万一我中了呢，岂不是血赚。 &amp;ldquo;噫，我中了。&amp;quot;(范进中举.jpg)
但是，无奸不商。任何看似血赚的活动，除非是商家脑子抽了，绝不会让你血赚。转发推文的行为实际上免费帮他们做了以下的宣传推广：</description></item><item><title>OBS Studio 显示正在播放的歌曲 in Linux</title><link>https://risehere.net/posts/obs-now-playing/</link><pubDate>Sun, 12 Jan 2020 11:22:20 +0800</pubDate><guid>https://risehere.net/posts/obs-now-playing/</guid><description>前言 前言的前言 欢迎大家关注我的 bilibili 帐号：bili-Amazingrise
不定期直播搬砖，游戏，或者其他有趣的东西~
缘由 为了能在直播的时候，显示我正在播放的歌曲，我想了很多的方法。
看到了 KDE Connect 里面能显示正在播放的歌曲，我觉得一定可以很容易地获取到当前媒体的状态信息。
另外，这篇文章的诞生也是受到这位的启发：获取 macOS 网易云音乐的正在播放 —— 使用 LLDB 验证思路 （没错，就是这个主题的原作者。）
正文 原理 当然，我们的 Linux 没有那么复杂，用一个 Shell 脚本就能读取到当前播放的媒体。
由于 OBS Studio 支持从文本文件读取文字内容，并且显示在输出流上，我们可以用 Shell 脚本先读出当前播放的媒体信息，然后再将它写入某个文件里，最后让 OBS Studio 读取这个文件就可以了。
以我用的 Electron Netease Cloud Music 为例。
在 Linux 中，显示正在播放是通过调用 dbus mpris API 实现的。
仔细看该项目的源代码，可以找到这几行：
const i = { name(suffix) { if (suffix) return `org.mpris.MediaPlayer2.${suffix}`; return &amp;#39;org.mpris.MediaPlayer2&amp;#39;; }, path(suffix) { if (suffix) return `/org/mpris/MediaPlayer2/${suffix}`; return &amp;#39;/org/mpris/MediaPlayer2&amp;#39;; } }; 我们可以获取到它的 dbus 路径(?</description></item><item><title>test</title><link>https://risehere.net/posts/2ng/</link><pubDate>Sun, 12 Jan 2020 11:22:20 +0800</pubDate><guid>https://risehere.net/posts/2ng/</guid><description>featured_image: tone.jpg
一级标题 二级标题 三级标题 以此类推 最高六级
When $a \ne 0$, there are two solutions to \(ax^2 + bx + c = 0\) and they are:
$$ x = {-b \pm \sqrt{b^2-4ac} \over 2a} $$
$$ \frac{1}{2} $$
前言的前言 欢迎大家关注我的 bilibili 帐号：bili-Amazingrise
不定期直播搬砖，游戏，或者其他有趣的东西~
缘由 为了能在直播的时候，显示我正在播放的歌曲，我想了很多的方法。
看到了 KDE Connect 里面能显示正在播放的歌曲，我觉得一定可以很容易地获取到当前媒体的状态信息。
另外，这篇文章的诞生也是受到这位的启发：获取 macOS 网易云音乐的正在播放 —— 使用 LLDB 验证思路 （没错，就是这个主题的原作者。）
正文 原理 当然，我们的 Linux 没有那么复杂，用一个 Shell 脚本就能读取到当前播放的媒体。
由于 OBS Studio 支持从文本文件读取文字内容，并且显示在输出流上，我们可以用 Shell 脚本先读出当前播放的媒体信息，然后再将它写入某个文件里，最后让 OBS Studio 读取这个文件就可以了。</description></item><item><title>如何优雅地使用 Spyder 的调试器</title><link>https://risehere.net/2019/10/28/howto-use-spyder-debugger/</link><pubDate>Mon, 28 Oct 2019 23:28:09 +0000</pubDate><guid>https://risehere.net/2019/10/28/howto-use-spyder-debugger/</guid><description>&lt;h1 id="前言">前言&lt;/h1>
&lt;p>这是一个面向初学者的文章.
很多朋友在初学编程的时候很难找出错误,或者对程序运行流程不太清楚.
这个时候调试器就要上场了~
所以在这里我要以Spyder为例,介绍调试器的用法.&lt;/p></description></item><item><title>(译)Kotlin中的等号，"=="，"==="和"equals"</title><link>https://risehere.net/2019/05/18/Equality-In-Kotlin-Translation/</link><pubDate>Sat, 18 May 2019 10:47:06 +0000</pubDate><guid>https://risehere.net/2019/05/18/Equality-In-Kotlin-Translation/</guid><description>Translated from: Equality in Kotlin Author: Suneet Agrawal Translated by : AmazingRise (Authorized by original author)
在编程中，我们经常需要比较两个变量的值是否相等，或者两个对象的引用是否一致。 Kotlin语言里，“等号”有这么几种：==，===与.equals。 那么问题来了，我们该如何正确使用这些相等性判断呢？
我们来一起看一看Kotlin的几种相等性判断：
结构性相等 (&amp;quot;==&amp;quot;) ==操作符用于比较两个变量的值。 请不要与Java中的==相混淆。 与Java中的==操作符不同的是：==操作符在Kotlin中只比较值。 而Java或其它语言中，==通常用来比较两个对象的引用。 Kotlin中，==的否定形式是!=，当两个变量值不同时返回真。
引用性相等(&amp;quot;===&amp;quot;) ===操作符用于比较两个变量的引用是否一致。只有当两个变量指向同一个实例时，===的值才为真。 ===的否定形式是!==，当两个对象的引用不同的时候返回真。
不过对于原始类型（Primitive type）来说（例如 Int），=== 等价于 == 。
.equals 方法 equals(other: Any?)方法是在Any类里实现的。 并且所有类中.equals都可以被重写（毕竟所有的类都继承于Any嘛，就像Java里的Object一样）。
.equals方法将会比较两个变量的值。 与==不同体现在比较Float和Double的时候，.equals违背了IEEE 754 浮点数运算标准。
与IEEE 754浮点数运算标准相违背，意味着什么？
这意味着：
NaN 等于它本身 NaN 比任何其他元素要大，包括正无穷 POSITIVE_INFINITY 编译器会认为-0.0 要比 0.0 小。 一头雾水？
举个栗子 我来举几个例子解释一下。
首先，我们用这几个方法比较两个原始类型的变量（Int）。
val int1 = 10 val int2 = 10 println(int1 == int2) // true println(int1.</description></item><item><title>Manjaro 在笔记本上的多显示器配置</title><link>https://risehere.net/2019/04/20/Manjaro-Optimus-Dual-Monitor/</link><pubDate>Sat, 20 Apr 2019 16:11:20 +0000</pubDate><guid>https://risehere.net/2019/04/20/Manjaro-Optimus-Dual-Monitor/</guid><description>最新方法 2020.9.12 更新
这篇文章里提到的解决方法应该用不上了，因为 video-hybrid-intel-nvidia-450xx-prime 可以直接识别笔记本上的双显示器。
如果你以前没看过这篇教程，并且双显示器不能正常工作，建议在系统设置里将驱动更换为 video-hybrid-intel-nvidia-450xx-prime，在更换完成前不要看这篇文章。 如果你以前看过这篇教程，建议将现有的video-nvidia-???xx更换为上述驱动，并且记得把这篇教程里更改过的配置文件一一还原。这个新的驱动修复了很多小问题。 如果你用的就是 video-hybrid-intel-nvidia-450xx-prime，并且双显示器无法工作，那么你可以参考这篇文章的内容，也许对你有帮助。 重要的话说三遍：
建议将驱动更换为 video-hybrid-intel-nvidia-450xx-prime，在更换完成前不要看这篇文章。
建议将驱动更换为 video-hybrid-intel-nvidia-450xx-prime，在更换完成前不要看这篇文章。
建议将驱动更换为 video-hybrid-intel-nvidia-450xx-prime，在更换完成前不要看这篇文章。
失败了再回来试一下这篇文章的方法。
背景 解决方法请翻到解决方法一节。
环境：
intel 集成显卡 + Nvidia 独立显卡，目前笔记本主流配置。但 HDMI 接口实际上是与 Nvidia 显卡相连接的，默认驱动无法对 N 卡输出。
症状：
无法接外接显示器，接上后无论是系统设置还是inxi -Fx都无法识别外置显示器。 检查启动日志，发现虽然开机时检测到了显示器，但后面就没有继续显示了。 如果你的是外接显卡坞+显示器，这篇教程不适合你。不过有网友（感谢@sunlitforest）用另一种方法操作成功了，详情请看这里。
参照ArchWiki上面的说法，让Optimus显卡在linux里面有三种实现方法：
BIOS里面禁用掉一个显卡。缺点：难以切换显卡。 用nouveau的PRIME功能。但是性能没有专有驱动好，睡眠和挂起也会出现问题。 用Bumblebee。不过Bumblebee很难支持双显示器。 用专有驱动。 用nvidia-xrun，让X服务器跑在n卡上。（貌似和1一样，但是1是硬件层面上的禁用。） 解决方法 我找到了Manjaro论坛里面的一个帖子。（作者Jonathon，是Manjaro开发团队的）
刚开始没有成功，后来在朋友的提醒下，发现原来我缺了一些步骤！ 我照着这个帖子的步骤原封不动地操作，成功了。所以，接下来一定要按照步骤严格操作。
以下内容均为本人的中文翻译。原帖在此 - How To Set up PRIME with NVIDIA proprietary driver
如何在Optimus的笔记本上开启PRIME：
方法 优点 缺点 bumblebee(Render offload) 按需使用独立显卡，Manjaro默认配置 有一定的开销，对性能有所影响 PRIME 直接使用独立显卡，性能更强 两块显卡都一直供电，需要手动配置 optimus-manager 显卡切换更简单 暂不成熟，还在开发中 video-hybrid-intel-nvidia-440xx-prime NVIDIA 官方支持的 render offload.</description></item></channel></rss>