<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Translation on 左手的世界</title><link>https://risehere.net/tags/translation/</link><description>Recent content in Translation on 左手的世界</description><generator>Hugo -- gohugo.io</generator><language>zh-TW</language><copyright>Rise. 本站遵循 CC-BY-NC 4.0 协议</copyright><lastBuildDate>Sat, 18 May 2019 10:47:06 +0000</lastBuildDate><atom:link href="https://risehere.net/tags/translation/index.xml" rel="self" type="application/rss+xml"/><item><title>(译)Kotlin中的等号，"=="，"==="和"equals"</title><link>https://risehere.net/2019/05/18/Equality-In-Kotlin-Translation/</link><pubDate>Sat, 18 May 2019 10:47:06 +0000</pubDate><guid>https://risehere.net/2019/05/18/Equality-In-Kotlin-Translation/</guid><description>Translated from: Equality in Kotlin Author: Suneet Agrawal Translated by : AmazingRise (Authorized by original author)
在编程中，我们经常需要比较两个变量的值是否相等，或者两个对象的引用是否一致。 Kotlin语言里，“等号”有这么几种：==，===与.equals。 那么问题来了，我们该如何正确使用这些相等性判断呢？
我们来一起看一看Kotlin的几种相等性判断：
结构性相等 (&amp;quot;==&amp;quot;) ==操作符用于比较两个变量的值。 请不要与Java中的==相混淆。 与Java中的==操作符不同的是：==操作符在Kotlin中只比较值。 而Java或其它语言中，==通常用来比较两个对象的引用。 Kotlin中，==的否定形式是!=，当两个变量值不同时返回真。
引用性相等(&amp;quot;===&amp;quot;) ===操作符用于比较两个变量的引用是否一致。只有当两个变量指向同一个实例时，===的值才为真。 ===的否定形式是!==，当两个对象的引用不同的时候返回真。
不过对于原始类型（Primitive type）来说（例如 Int），=== 等价于 == 。
.equals 方法 equals(other: Any?)方法是在Any类里实现的。 并且所有类中.equals都可以被重写（毕竟所有的类都继承于Any嘛，就像Java里的Object一样）。
.equals方法将会比较两个变量的值。 与==不同体现在比较Float和Double的时候，.equals违背了IEEE 754 浮点数运算标准。
与IEEE 754浮点数运算标准相违背，意味着什么？
这意味着：
NaN 等于它本身 NaN 比任何其他元素要大，包括正无穷 POSITIVE_INFINITY 编译器会认为-0.0 要比 0.0 小。 一头雾水？
举个栗子 我来举几个例子解释一下。
首先，我们用这几个方法比较两个原始类型的变量（Int）。
val int1 = 10 val int2 = 10 println(int1 == int2) // true println(int1.</description></item></channel></rss>